
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
 <channel>
   <title>Categories on Krishnan</title>
   <link>https://krish22.github.io/categories/</link>
   <description>Recent content in Categories on Krishnan</description>
   <generator>Hugo -- gohugo.io</generator>
   <copyright>Copyright &amp;copy; 2020 - Krishnan</copyright>
   <lastBuildDate>Thu, 19 Nov 2020 00:00:00 +0000</lastBuildDate>
   
       <atom:link href="https://krish22.github.io/categories/index.xml" rel="self" type="application/rss+xml" />
   
   
     <item>
       <title>Get Access Token from Keycloak using Postman</title>
       <link>https://krish22.github.io/posts/postman-keycloack/</link>
       <pubDate>Thu, 19 Nov 2020 00:00:00 +0000</pubDate>
       
       <guid>https://krish22.github.io/posts/postman-keycloack/</guid>
       <description>&lt;p&gt;This post will help you to automate getting access token from keycloak and added into request param before each API hits server.&lt;/p&gt;
&lt;h2 id=&#34;to-get-access-token-using-postman-for-testing&#34;&gt;To Get Access Token Using Postman (For Testing)&lt;/h2&gt;
&lt;h3 id=&#34;create-new-collection-in-postman&#34;&gt;Create new Collection in postman&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Click new collection button in postman&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Select variable tab and add the below variables&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;client_id : &amp;lt;_Copy the client id from your realm setting in KC_&amp;gt;&lt;/li&gt;
&lt;li&gt;client_secret : &amp;lt;_Make sure you copy the right secrets for the client_&amp;gt;&lt;/li&gt;
&lt;li&gt;scope  : &lt;em&gt;type &amp;lsquo;openid&amp;rsquo;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;token_endpoint : &amp;lt;_http://&lt;strong&gt;KEYCLOAK-SERVER_URL&lt;/strong&gt;/auth/realms/&lt;strong&gt;REPLACE_WITH_YOUR_REALM_NAME&lt;/strong&gt;/protocol/openid-connect/token_&amp;gt;&lt;/li&gt;
&lt;li&gt;access_token : &amp;lt;_Leave it blank, this will be populated by pre-request script_&amp;gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://krish22.github.io/images/postman-variable.jpg&#34; alt=&#34;variable&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Go to authorization tab&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Select Type = Bearer Token&lt;/li&gt;
&lt;li&gt;Token = {{access_token}} &lt;em&gt;&lt;!-- raw HTML omitted --&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://krish22.github.io/images/postman-auth.JPG&#34; alt=&#34;authorization&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Now go to pre-request scripts tab and paste the following code&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;client_id&lt;/span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pm&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;collectionVariables&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;client_id&amp;#34;&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;client_secret&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pm&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;collectionVariables&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;client_secret&amp;#34;&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;token_endpoint&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pm&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;collectionVariables&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;token_endpoint&amp;#34;&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;scope&lt;/span&gt;          &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pm&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;collectionVariables&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;scope&amp;#34;&lt;/span&gt;);

&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;details&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
   &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;grant_type&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;client_credentials&amp;#34;&lt;/span&gt;,
   &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;scope&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;scope&lt;/span&gt;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;formBody&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [];
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;property&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;details&lt;/span&gt;) {
 &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;encodedKey&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; encodeURIComponent(&lt;span style=&#34;color:#a6e22e&#34;&gt;property&lt;/span&gt;);
 &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;encodedValue&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; encodeURIComponent(&lt;span style=&#34;color:#a6e22e&#34;&gt;details&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;property&lt;/span&gt;]);
 &lt;span style=&#34;color:#a6e22e&#34;&gt;formBody&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;push&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;encodedKey&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;=&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;encodedValue&lt;/span&gt;);
}
&lt;span style=&#34;color:#a6e22e&#34;&gt;formBody&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;formBody&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;join&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;amp;&amp;#34;&lt;/span&gt;);

&lt;span style=&#34;color:#a6e22e&#34;&gt;pm&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;sendRequest&lt;/span&gt;({
   &lt;span style=&#34;color:#a6e22e&#34;&gt;url&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;token_endpoint&lt;/span&gt;,
   &lt;span style=&#34;color:#a6e22e&#34;&gt;method&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;POST&amp;#39;&lt;/span&gt;,
   &lt;span style=&#34;color:#a6e22e&#34;&gt;header&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {
       &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Content-Type&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;application/x-www-form-urlencoded&amp;#39;&lt;/span&gt;,
       &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Authorization&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Basic &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;btoa&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;client_id&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;:&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;client_secret&lt;/span&gt;)
         },
     &lt;span style=&#34;color:#a6e22e&#34;&gt;body&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;formBody&lt;/span&gt;
},  &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;response&lt;/span&gt;) {
 &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;jsonResponse&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;response&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;json&lt;/span&gt;();
 &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;jsonResponse&lt;/span&gt;);
 &lt;span style=&#34;color:#a6e22e&#34;&gt;pm&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;collectionVariables&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;access_token&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;jsonResponse&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;access_token&lt;/span&gt;);
 &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;pm&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;collectionVariables&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;access_token&amp;#34;&lt;/span&gt;));

}); 

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://krish22.github.io/images/postman-pre-request-script.JPG&#34; alt=&#34;Pre request scripts&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;This code will get a new token from keycloak and extract the access_token from response
and set into a collection variable {{access_token}}&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Now, save your collections&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;create-new-request&#34;&gt;Create new Request&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Create a new request&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Select Authorization tab&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Select Type = Inherit auth from parent&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://krish22.github.io/images/postman-request.JPG&#34; alt=&#34;Sample Request&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add your headers, request body if any&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Make sure you save the request under the collection that you created above&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Now try running the script.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;key-points&#34;&gt;Key Points&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;This script will be executed before each request in this collection and attach the access_token
to the request.&lt;/li&gt;
&lt;/ul&gt;</description>
     </item>
   
     <item>
       <title>Basic working principle of Kerberos</title>
       <link>https://krish22.github.io/posts/kerberos-principle/</link>
       <pubDate>Fri, 25 Sep 2020 00:00:00 +0000</pubDate>
       
       <guid>https://krish22.github.io/posts/kerberos-principle/</guid>
       <description>&lt;p&gt;Kerberos is a computer-network authentication protocol that works on the basis of tickets to allow nodes communicating over a non-secure network to prove their identity to one another in a secure manner.&lt;/p&gt;
&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Kerberos is a computer-network authentication protocol that works on the basis of tickets to allow nodes communicating over a non-secure network to prove their identity to one another in a secure manner.&lt;/p&gt;
&lt;p&gt;Kerberos builds on symmetric key cryptography and requires a trusted third party.&lt;/p&gt;
&lt;p&gt;Kerberos uses UDP port 88 by default.&lt;/p&gt;
&lt;h2 id=&#34;architecture&#34;&gt;Architecture&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Client ( C ): An entity which wants to make use of any service hosted on a server.&lt;/li&gt;
&lt;li&gt;Server (V): An entity which hosts different services which clients request for.&lt;/li&gt;
&lt;li&gt;Authentication Server (AS): A trusted Third Party which knows the passwords of all users and stores these in a centralized database. Also, the AS shares a unique secret key with each server. It shares a key Kcs with C, a key
Kvs with V and generates new session keys Kcv.&lt;/li&gt;
&lt;li&gt;Ticket Granting Server (TGS): TGS, issues tickets to clients who have been authenticated to AS. Thus, the client first requests a ticket-granting ticket (Tickettgs) from the AS. The client module saves this ticket. Each time the user requires access to a new service, the client applies to the TGS, using the ticket to authenticate itself. The TGS then grants a ticket for the particular service. The client saves each service-granting ticket and uses it to authenticate its user to a server each time a particular service is requested.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://krish22.github.io/images/KerberosArchitecture.jpg&#34; alt=&#34;Kerberos Arch&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;client-authentication&#34;&gt;Client Authentication&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;The client sends a cleartext message of the user ID to the AS (Authentication Server) requesting services on behalf of the user. (Note: Neither the secret key nor the password is sent to the AS.)&lt;/li&gt;
&lt;li&gt;The AS checks to see if the client is in its database. If it is, the AS generates the secret key by hashing the password of the user found at the database (e.g., Active Directory in Windows Server) and sends back the following two messages to the client:
&lt;ul&gt;
&lt;li&gt;Message A: Client/TGS Session Key encrypted using the secret key of the client/user.&lt;/li&gt;
&lt;li&gt;Message B: Ticket-Granting-Ticket (TGT, which includes the client ID, client network address, ticket validity period, and the client/TGS session key) encrypted using the secret key of the TGS.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Once the client receives messages A and B, it attempts to decrypt message A with the secret key generated from the password entered by the user. If the user entered password does not match the password in the AS database, the client&amp;rsquo;s secret key will be different and thus unable to decrypt message A.&lt;/li&gt;
&lt;li&gt;With a valid password and secret key the client decrypts message A to obtain the Client/TGS Session Key. This session key is used for further communications with the TGS. (Note: The client cannot decrypt Message B, as it is encrypted using TGS&amp;rsquo;s secret key.) At this point, the client has enough information to authenticate itself to the TGS.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;A hashed client password is used to decrypt the message A from Authentication Server(AS) at client machine&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;client-service-authorization&#34;&gt;Client Service Authorization&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;When requesting services, the client sends the following messages to the TGS:
&lt;ul&gt;
&lt;li&gt;Message C: Composed of the TGT from message B and the ID of the requested service.&lt;/li&gt;
&lt;li&gt;Message D: Authenticator (which is composed of the client ID and the timestamp), encrypted using the Client/TGS Session Key.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Upon receiving messages C and D, the TGS retrieves message B out of message C. It decrypts message B using the TGS secret key. This gives it the &amp;ldquo;client/TGS session key&amp;rdquo;. Using this key, the TGS decrypts message D (Authenticator) and compare client ID from message C and D, if they match server sends the following two messages to the client:
&lt;ul&gt;
&lt;li&gt;Message E: Client-to-server ticket (which includes the client ID, client network address, validity period and Client/Server Session Key) encrypted using the service&amp;rsquo;s secret key.&lt;/li&gt;
&lt;li&gt;Message F: Client/Server Session Key encrypted with the Client/TGS Session Key.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;client-service-request&#34;&gt;Client Service Request&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Upon receiving messages E and F from TGS, the client has enough information to authenticate itself to the Service Server (SS). The client connects to the SS and sends the following two messages:
&lt;ul&gt;
&lt;li&gt;Message E: from the previous step (the client-to-server ticket, encrypted using service&amp;rsquo;s secret key).&lt;/li&gt;
&lt;li&gt;Message G: a new Authenticator, which includes the client ID, timestamp and is encrypted using Client/Server Session Key.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The V decrypts the ticket (message E) using its own secret key to retrieve the Client/Server Session Key. Using the sessions key, SS decrypts the Authenticator and compares client ID from messages E and G, if they match server sends the following message to the client to confirm its true identity and willingness to serve the client:
&lt;ul&gt;
&lt;li&gt;Message H: the timestamp found in client&amp;rsquo;s Authenticator (plus 1 in version 4, but not necessary in version 5[6][7]), encrypted using the Client/Server Session Key.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The client decrypts the confirmation (message H) using the Client/Server Session Key and checks whether the timestamp is correct. If so, then the client can trust the server and can start issuing service requests to the server.&lt;/li&gt;
&lt;li&gt;The server provides the requested services to the client.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;kerberos-message-exchange&#34;&gt;Kerberos Message Exchange&lt;/h2&gt;
&lt;p&gt;This will explain how and what are the messages are exchanging between the client and KDC to get the authentication ticket to server&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://krish22.github.io/images/KerberosMessageExchangeFlowDiagram.jpg&#34; alt=&#34;Kerberos Flow Diagram&#34;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;C → AS :&lt;/p&gt;
&lt;p&gt;Below is the message that sends from client to AS&lt;/p&gt;
&lt;p&gt;C || TGS&lt;!-- raw HTML omitted --&gt;ID&lt;!-- raw HTML omitted --&gt; || TS&lt;!-- raw HTML omitted --&gt;1&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;In this message, the client requests a ticket-granting ticket by sending its identity and password to the AS, together with the identity of TGS, indicating a request to use the TGS service and a time stamp, so that the AS knows that the message is timely.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;AS → C :&lt;/p&gt;
&lt;p&gt;Below is the message that sends back from AS to C&lt;/p&gt;
&lt;p&gt;E(K&lt;!-- raw HTML omitted --&gt;c&lt;!-- raw HTML omitted --&gt;, [K&lt;!-- raw HTML omitted --&gt;c,tgs&lt;!-- raw HTML omitted --&gt; || TGS&lt;!-- raw HTML omitted --&gt;ID&lt;!-- raw HTML omitted --&gt;|| TS&lt;!-- raw HTML omitted --&gt;2&lt;!-- raw HTML omitted --&gt; || Lifetime2 || Ticket&lt;!-- raw HTML omitted --&gt;tgs&lt;!-- raw HTML omitted --&gt; ])&lt;/p&gt;
&lt;p&gt;Ticket&lt;!-- raw HTML omitted --&gt;tgs&lt;!-- raw HTML omitted --&gt; = E(K&lt;!-- raw HTML omitted --&gt;tgs&lt;!-- raw HTML omitted --&gt;, [K&lt;!-- raw HTML omitted --&gt;c,tgs&lt;!-- raw HTML omitted --&gt; || C || AD&lt;!-- raw HTML omitted --&gt;c&lt;!-- raw HTML omitted --&gt; || TGS&lt;!-- raw HTML omitted --&gt;ID&lt;!-- raw HTML omitted --&gt; || TS&lt;!-- raw HTML omitted --&gt;2&lt;!-- raw HTML omitted --&gt; || Lifetime2])&lt;/p&gt;
&lt;p&gt;The AS responds with a message, encrypted with a key derived from the user’s password that contains the ticket requested by client. This message also contains session key K&lt;!-- raw HTML omitted --&gt;c,tgs&lt;!-- raw HTML omitted --&gt; to be shared between TGS and Client. The
client retrieves this key.
The ticket is encrypted with TGS’s key K&lt;!-- raw HTML omitted --&gt;tgs&lt;!-- raw HTML omitted --&gt; which is
already shared with AS. The ticket contains session key
K&lt;!-- raw HTML omitted --&gt;c,tgs&lt;!-- raw HTML omitted --&gt; which is retrieved by TGS. Like this, the session
key has been securely delivered to both C and the TGS.
The ticket also contains ADc (Network Address of client)
which prevents the use of ticket from workstation other
than one that initially requested the ticket.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;C → TGS :&lt;/p&gt;
&lt;p&gt;Below is the message that sends from client to TGS&lt;/p&gt;
&lt;p&gt;V || Ticket&lt;!-- raw HTML omitted --&gt;tgs&lt;!-- raw HTML omitted --&gt; || Authenticator&lt;!-- raw HTML omitted --&gt;c&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;Authenticator&lt;!-- raw HTML omitted --&gt;c&lt;!-- raw HTML omitted --&gt; = E(K&lt;!-- raw HTML omitted --&gt;c,tgs&lt;!-- raw HTML omitted --&gt;[C||AD&lt;!-- raw HTML omitted --&gt;c&lt;!-- raw HTML omitted --&gt;||TS3])&lt;/p&gt;
&lt;p&gt;The client sends message to TGS stating the identification of the requested service V, Ticket&lt;!-- raw HTML omitted --&gt;tgs&lt;!-- raw HTML omitted --&gt;, an authenticator which includes the identity of client C, address of Client AD&lt;!-- raw HTML omitted --&gt;c&lt;!-- raw HTML omitted --&gt; and a time stamp. The authenticator is intended for use only once and has a very short lifetime. The TGS  can decrypt the ticket with the key that it shares with the
AS. The TGS uses the session key Kc,tgs to decrypt the authenticator. The TGS can then check the identity and   address from the authenticator with that of the ticket and
with the network address of the incoming message. If all match, then the TGS is assured that the sender of the ticket is indeed the ticket’s real owner.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;TGS → C :&lt;/p&gt;
&lt;p&gt;Below is the message that sends back from TGS to Client&lt;/p&gt;
&lt;p&gt;E(K&lt;!-- raw HTML omitted --&gt;c,tgs&lt;!-- raw HTML omitted --&gt;[K&lt;!-- raw HTML omitted --&gt;c,v&lt;!-- raw HTML omitted --&gt;|| V ||TS&lt;!-- raw HTML omitted --&gt;4&lt;!-- raw HTML omitted --&gt; ||Ticket&lt;!-- raw HTML omitted --&gt;v&lt;!-- raw HTML omitted --&gt;])&lt;/p&gt;
&lt;p&gt;Ticket&lt;!-- raw HTML omitted --&gt;v&lt;!-- raw HTML omitted --&gt; = E(K&lt;!-- raw HTML omitted --&gt;v&lt;!-- raw HTML omitted --&gt;[K&lt;!-- raw HTML omitted --&gt;c,v&lt;!-- raw HTML omitted --&gt;||C||AD&lt;!-- raw HTML omitted --&gt;c&lt;!-- raw HTML omitted --&gt;||V||TS4||Lifetime4])&lt;/p&gt;
&lt;p&gt;The TGS then sends C above message as a response to request. This message is encrypted by session key shared between TGS and client and includes a session key to be shared between Client and the server V, the identification of V, and the time stamp of the ticket. The ticket also includes session key to be shared between client and server V,and it is encrypted with V’s key KV.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;C → V :&lt;/p&gt;
&lt;p&gt;Below is the message that sends from client to Resource Server (v)&lt;/p&gt;
&lt;p&gt;Ticket&lt;!-- raw HTML omitted --&gt;v&lt;!-- raw HTML omitted --&gt;||Authenticator&lt;!-- raw HTML omitted --&gt;c&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;Authenticator&lt;!-- raw HTML omitted --&gt;c&lt;!-- raw HTML omitted --&gt; = E(K&lt;!-- raw HTML omitted --&gt;c,v&lt;!-- raw HTML omitted --&gt;[C||AD&lt;!-- raw HTML omitted --&gt;c&lt;!-- raw HTML omitted --&gt;||TS5])&lt;/p&gt;
&lt;p&gt;In this message the client sends the ticket received by TGS to server V. Client also sends an authenticator. The server can decrypt the ticket, recover the session key, and decrypt
the authenticator.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;V → C :&lt;/p&gt;
&lt;p&gt;E(K&lt;!-- raw HTML omitted --&gt;c,v&lt;!-- raw HTML omitted --&gt;[TS5+1])&lt;/p&gt;
&lt;p&gt;The server V sends the value of the time stamp from the authenticator, incremented by 1, encrypted in the session key K&lt;!-- raw HTML omitted --&gt;c,v&lt;!-- raw HTML omitted --&gt;. C can decrypt this message to recover the incremented time stamp. Because the message was
encrypted by the session key, C is assured that it could have been created only by V.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</description>
     </item>
   
     <item>
       <title>In Memory Server side pagination</title>
       <link>https://krish22.github.io/posts/pagination-plugin/</link>
       <pubDate>Fri, 25 Sep 2020 00:00:00 +0000</pubDate>
       
       <guid>https://krish22.github.io/posts/pagination-plugin/</guid>
       <description>&lt;p&gt;Are you dealing with tens-of-thousands of data that supposed to show in the UI, but your data source doesn&amp;rsquo;t support
pagination and filtering provisons. Server Side pagination will be the best suit for that, No worries this plugin will help you to achive pagination, sorting and filtering using in-memory&lt;/p&gt;
&lt;h2 id=&#34;server-side-pagination&#34;&gt;Server Side Pagination&lt;/h2&gt;
&lt;p&gt;As we are developing so many software in today&amp;rsquo;s world and dealing with millions and millions of data. Imagine a situation where you have millions of data to show on your web page. A browser will have not able to render all the data at one shot. So the best option is to go for server-side pagination, where a server will return the bounded number of rows to show in the UI.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;about-this-plugin&#34;&gt;About this Plugin&lt;/h2&gt;
&lt;p&gt;In most cases, we have a relational database or no-SQL databases which will run the query with limit, offset, ordering along with filtering/searching criteria.&lt;/p&gt;
&lt;p&gt;There may be a situation arise where you cannot afford to run a SQL query to get the data, but you want to do support pagination.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Yes here, this plugin will have all the data&amp;rsquo;s that loaded in to server and does magic of (pagination, searching) for you.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;Note: Assuming you have very good memory allocated for JVM, and GC will help us to remove the unused objects at an earlier stage.&lt;/code&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;things-that-this-plugin-supports&#34;&gt;Things that this plugin supports&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;This allows you to use pagination with help of limit and offset&lt;/li&gt;
&lt;li&gt;One can sort the data by column&lt;/li&gt;
&lt;li&gt;Also, search the text in all column (case-insensitive) and get the relevant data&lt;/li&gt;
&lt;li&gt;It also includes the regex supports for searching, (i.e) you can pass a regular expression to find relevant data,&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&#34;lets-learn-how-to-use-this-plugin&#34;&gt;Let&amp;rsquo;s Learn how to use this plugin&lt;/h2&gt;
&lt;p&gt;This plugin is written in JAVA 1.8 version.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Import the source code from &lt;a href=&#34;https://github.com/krish22/paginationplugin&#34;&gt;here&lt;/a&gt; into your application&lt;/li&gt;
&lt;li&gt;In your repository class extends the PagainationDataService and just override the getData() method as follow, This method will return the complete source data from which the plugin will take care of performing pagination and searching for you.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;EmployeeRepository&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; PaginationDataServiceBase&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Employee&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;

&lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;protected&lt;/span&gt; List &lt;span style=&#34;color:#a6e22e&#34;&gt;getData&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;PaginationCriteria paginationCriteria&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;throws&lt;/span&gt; PaginationException &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;YOUR ENTIRE SOURCE DATA&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Now, From your service or controller class, create a simple paginator object and call getPageResult as follow,&lt;/li&gt;
&lt;li&gt;A getPageResult() method will take PaginationCritera as an input which follows&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PaginationCriteria&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * Number of items that need to to displayed in a page
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * If it is 0 then it will return all records
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; limit&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * Paging first record indicator. This is the start point in the current data
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * set (0 index based - i.e. 0 is the first record).
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; offset&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * search text that will do searching in all columns
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; String query&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * Column&amp;#39;s ordering criteria.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; OrderingCriteria sort&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * Name of the column to sort
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; String column&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;This plugin also supports search with regex as well.&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DemoApplication&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; ITablePaginator&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Employee&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; paginator &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; SimplePaginator&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Employee&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; EmployeeRepository&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; args&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;throws&lt;/span&gt; PaginationException &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        PaginationCriteria criteria &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; PaginationCriteria&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;

        IPage&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Object&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; pageResult &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; paginator&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getPageResult&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;criteria&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;

        System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;pageResult&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;This Plugin allows you to fully customize the implementations, for instance, the SimplePaginator will be used for performing all pagination, searching, and sorting of an object by holding it into a memory.&lt;/li&gt;
&lt;li&gt;SimplePaginator will build the output and returns the values as below&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{
     &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;totalCount&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;10,&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;This&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;represent&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;the&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;total&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;record&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;count&lt;/span&gt;
     &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;items&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;[],&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;//Array&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;of&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;custom&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;objects&lt;/span&gt; 
     &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;limit&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;10,//&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;This&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;specifies&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;the&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;number&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;of&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;records&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;that&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;need&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;to&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;be&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;returned&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;page.&lt;/span&gt;
     &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;offset&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;10,&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;//This&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;specifies&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;the&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;number&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;of&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;rows&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;to&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;skip&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;before&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;starting&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;to&lt;/span&gt;    &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;rows&lt;/span&gt;
     &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;filteredCount&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;2,&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;This&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;specified&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;the&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;number&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;of&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;records&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;mathced&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;search&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;text&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;7&#34;&gt;
&lt;li&gt;You can also implement your own ITablePaginator if you wish you have any other behavior&lt;/li&gt;
&lt;li&gt;Now, assume your application uses any relation or NO-SQL database which supports pagination and filtering option by using a query.&lt;/li&gt;
&lt;li&gt;In such a case, you can still this plugin by overriding the getPageEntries(PaginationCriteria criteria) method from PaginationDataServiceBase, but remember you need to write a query with ordering, limiting, offset, and filtering clause&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h3 id=&#34;points-to-remember&#34;&gt;POINTS TO REMEMBER&lt;/h3&gt;
&lt;p&gt;if you want to sort a nested column, for example, An Employee object has a Company object inside it that if you wish to sort the employee using company name then you need to set the column value as &amp;ldquo;company.name&amp;rdquo; of PaginationCriteria class.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;caveats&#34;&gt;Caveats&lt;/h3&gt;
&lt;p&gt;The performance of in-memory pagination is fully dependent on the machine that uses. This plugin will really help when you have tens-of-thousands of data to show on your webpage with pagination.&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Spring Boot Migration From 1.5 to 2.0.5</title>
       <link>https://krish22.github.io/posts/spring-boot-migration/</link>
       <pubDate>Sun, 05 Jul 2020 00:00:00 +0000</pubDate>
       
       <guid>https://krish22.github.io/posts/spring-boot-migration/</guid>
       <description>&lt;p&gt;Thinking of upgrading your Spring Boot application? In this post, I’d like to walk you through the process of upgrading a Spring Boot 1.x app to Spring Boot 2.&lt;/p&gt;
&lt;h2 id=&#34;dependencies&#34;&gt;Dependencies&lt;/h2&gt;
&lt;h3 id=&#34;java&#34;&gt;Java&lt;/h3&gt;
&lt;p&gt;Spring Boot 2.x will no longer support Java 7 and below, with Java 8 as the minimum requirement.&lt;/p&gt;
&lt;p&gt;It’s also the first version to support Java 9. There are no plans to support Java 9 on the 1.x branch. If you want to use the latest Java release and take full advantage of the framework, Spring Boot 2.x is your only option.&lt;/p&gt;
&lt;h3 id=&#34;gradle&#34;&gt;Gradle&lt;/h3&gt;
&lt;p&gt;The Gradle minimum supported version is &lt;code&gt;3.4&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The Gradle has many value-added features to have our dependency on the central repository.&lt;/p&gt;
&lt;p&gt;To create fat jars, &lt;code&gt;bootRepackage&lt;/code&gt; Gradle’s task gets replaced with &lt;code&gt;bootJar&lt;/code&gt; and &lt;code&gt;bootWar&lt;/code&gt; to build jars and wars respectively.&lt;/p&gt;
&lt;p&gt;It is interesting to know that Spring Boot 2.x will no longer apply the dependency management plugin by default. If you want Spring Boot dependency management, then you should add:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-gradle&#34; data-lang=&#34;gradle&#34;&gt;apply plugin: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;io.spring.dependency-management&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;A few highlights regarding minimum required versions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Tomcat minimum supported version is 8.5&lt;/li&gt;
&lt;li&gt;Hibernate minimum supported version is 5.2&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;steps-to-upgrade&#34;&gt;Steps to Upgrade&lt;/h2&gt;
&lt;h3 id=&#34;step-1&#34;&gt;Step 1:&lt;/h3&gt;
&lt;p&gt;Assuming that you are using a Gradle build tool for building your application, your build.gradle file should look as follows:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-gradle&#34; data-lang=&#34;gradle&#34;&gt;buildscript &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
repositories &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; 
   jcenter&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;
   mavenCentral&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
dependencies &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
  classpath&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;org.springframework.boot:spring-boot-gradle-plugin:2.0.5.RELEASE&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
 &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
plugins &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
   id &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;org.springframework.boot&amp;#39;&lt;/span&gt; version &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2.0.5.RELEASE&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
apply plugin: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;java&amp;#39;&lt;/span&gt;
apply plugin: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;maven&amp;#39;&lt;/span&gt;
apply plugin: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;org.springframework.boot&amp;#39;&lt;/span&gt;
dependencies 
&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
  compile group: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;javax.servlet&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; name: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;javax.servlet-api&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; version: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;3.1.0&amp;#39;&lt;/span&gt;
  compile group: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;org.springframework.boot&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; name: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;spring-boot-starter-web&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, this will download all the required dependency jar files for the Spring Boot verison 2.0.5 release&lt;/p&gt;
&lt;h2 id=&#34;step-2&#34;&gt;Step 2:&lt;/h2&gt;
&lt;p&gt;Change the application properties as follows if you used any of the following properties in your application:&lt;/p&gt;
&lt;h3 id=&#34;servlet-specific-server-properties&#34;&gt;Servlet-Specific Server Properties&lt;/h3&gt;
&lt;p&gt;A number of server.* properties that are servlet-specific have moved to server.servlet:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;old Property&lt;/th&gt;
&lt;th&gt;New Property&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;server.context-parameters.*&lt;/td&gt;
&lt;td&gt;server.servlet.context-parameters.*&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;server.context-path&lt;/td&gt;
&lt;td&gt;server.servlet.context-path&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;server.jsp.class-name&lt;/td&gt;
&lt;td&gt;server.servlet.jsp.class-name&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;server.jsp.init-parameters.*&lt;/td&gt;
&lt;td&gt;server.servlet.jsp.init-parameters.*&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;server.jsp.registered&lt;/td&gt;
&lt;td&gt;server.servlet.jsp.registered&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;server.servlet-path&lt;/td&gt;
&lt;td&gt;server.servlet.path&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Here is the list of commonly used &lt;a href=&#34;https://docs.spring.io/spring-boot/docs/current/reference/html/common-application-properties.html&#34;&gt;application properties&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;step-3&#34;&gt;Step 3:&lt;/h3&gt;
&lt;p&gt;Replace the deprecated methods and classes. Here are some of the deprecated classes that I came across and the respective classes&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Deprecated Class&lt;/th&gt;
&lt;th&gt;New Class&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;org.springframework.web.context.request.RequestAttributes&lt;/td&gt;
&lt;td&gt;org.springframework.web.context.request.WebRequest&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;org.springframework.data.querydsl.QueryDslPredicateExecutor&lt;/td&gt;
&lt;td&gt;org.springframework.data.querydsl.QuerydslPredicateExecutor&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;org.springframework.boot.autoconfigure.web.DefaultErrorAttributes&lt;/td&gt;
&lt;td&gt;org.springframework.boot.web.servlet.error.DefaultErrorAttributes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;org.springframework.web.context.request.ServletRequestAttributes&lt;/td&gt;
&lt;td&gt;org.springframework.web.context.request.ServletWebRequest&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;org.springframework.boot.web.support.SpringBootServletInitializer&lt;/td&gt;
&lt;td&gt;org.springframework.boot.web.servlet.support.SpringBootServletInitializer&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;WebConfigurer&lt;/td&gt;
&lt;td&gt;WebMvcConfigurer&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;step-4&#34;&gt;Step 4:&lt;/h3&gt;
&lt;p&gt;Now, run your main class. Your application should be up and running.&lt;/p&gt;
&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;
&lt;p&gt;In this article, we covered steps to migrating from Spring Boot 1.5.x to Spring Boot 2.0.5, where we discussed dependencies and how Java 8 becomes the minimum supported version.&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Keep Your Secrets Away From Code (Consul &#43; Spring)</title>
       <link>https://krish22.github.io/posts/spring-consul/</link>
       <pubDate>Sat, 04 Jul 2020 00:00:00 +0000</pubDate>
       
       <guid>https://krish22.github.io/posts/spring-consul/</guid>
       <description>&lt;p&gt;This post will walk you through the Consul cloud security platform, and how to integrate it with your Spring application.&lt;/p&gt;
&lt;h2 id=&#34;consul&#34;&gt;Consul&lt;/h2&gt;
&lt;p&gt;According it&amp;rsquo;s documentation, &amp;ldquo;Consul is a distributed service mesh to connect, secure, and configure services across any runtime platform and public or private cloud.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;You can read more about Consul &lt;a href=&#34;https://www.consul.io/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Now, we are going to focus on the key/value store in Consul. The KV store is one of the major features available in Consul to have all your application configuration properties in one place.&lt;/p&gt;
&lt;h2 id=&#34;problem&#34;&gt;Problem&lt;/h2&gt;
&lt;p&gt;Generally, we all are taught to have our application-related configurations in an application.properties file. Whenever we need to change the value, then we will be changing it in the file and have to rebuild and re-deploy the application to make changes to the application.&lt;/p&gt;
&lt;p&gt;For instance, assume you have a secret key or password in your application.properties file. If there is any attack on your server and the code leaks, all your critical information and your system will become vulnerable.&lt;/p&gt;
&lt;h2 id=&#34;solution&#34;&gt;Solution&lt;/h2&gt;
&lt;p&gt;Consul will actually help you to avoid the above-stated problems.&lt;/p&gt;
&lt;h2 id=&#34;why-consul-kv&#34;&gt;Why Consul KV&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;You will be storing all your configuration properties in the Consul KV store which eliminates code leaks.&lt;/li&gt;
&lt;li&gt;Whenever there is a change in the key/value, you are not required to redeploy or reboot your server.&lt;/li&gt;
&lt;li&gt;Spring boot has an efficiency to reflect the values in your application instantly.&lt;/li&gt;
&lt;li&gt;One Consul instance is sufficient to have all your environment properties like dev, stage, and production protected.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;install-consul&#34;&gt;Install Consul&lt;/h2&gt;
&lt;p&gt;There are multiple ways to install Consul:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You can install it using &lt;a href=&#34;https://www.consul.io/docs/guides/consul-containers.html&#34;&gt;Docker&lt;/a&gt; .&lt;/li&gt;
&lt;li&gt;You can download and run it on your &lt;a href=&#34;https://www.consul.io/downloads.html&#34;&gt;local machine&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I have used the second approach, and downloaded the file and extracted it onto a local directory.&lt;/p&gt;
&lt;h2 id=&#34;steps-to-start-consul&#34;&gt;Steps to Start Consul&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Open your terminal.&lt;/li&gt;
&lt;li&gt;Go to the directory where you have extracted Consul.&lt;/li&gt;
&lt;li&gt;Run the below commands:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;root $ ./consul agent -server -bootstrap-expect=1 -data-dir=consul-data -ui -bind=127.0.0.1
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;Open the browser and go to http://localhost:8500.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now you will see a Consul screen.&lt;/p&gt;
&lt;h2 id=&#34;create-kv-in-consul&#34;&gt;Create KV in Consul&lt;/h2&gt;
&lt;p&gt;You can insert your KV into Consul in two ways:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Using the command line tool.&lt;/li&gt;
&lt;li&gt;Using the browser.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;using-the-command-line-tool&#34;&gt;Using the Command Line Tool&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Run the below command to insert a single key:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;root $  ./consul kv put config/testapplication/testkey testvalue
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; You need to maintain the above coding standard, i.e. config is mandatory followed by your application name and followed by your key name.
Tables aren&amp;rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Follow this to insert multiple keys:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create a .json file as follows
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;[
    {   
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;key&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;config/testApplication/testkey&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;value:&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;dGVzdFZhbHVl&amp;#34;&lt;/span&gt;
    },
    {   
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;key&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;config/testApplication/testkey2&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;value:&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;dGVzdFZhbHVls&amp;#34;&lt;/span&gt;
    }
]    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; The value should be a Base-64 Encoded String.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Then run the below commands to import data’s to consul
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;root $  ./consul kv import @/your-file-path/filename.json
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;To know more about Consul KV commands, go &lt;a href=&#34;https://www.consul.io/docs/commands/index.html&#34;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;using-the-browser&#34;&gt;Using the Browser&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Open http://localhost:8500 in your browser.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Click key/value in the menu.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://krish22.github.io/images/consul.png&#34; alt=&#34;consul screenshot&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Click the Create button.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Enter the key as follows:
&lt;code&gt;config/testApplication/testkey&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Enter the value as follows:
&lt;code&gt;test value&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: You don&amp;rsquo;t have to encode the string in the case of the UI&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That’s it, now Consul is ready to integrate with your application.&lt;/p&gt;
&lt;h2 id=&#34;steps-to-integrate-consul-with-your-spring-application&#34;&gt;Steps to Integrate Consul With Your Spring Application:&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;If you don&amp;rsquo;t already have a Spring application up and running, you can create one &lt;a href=&#34;https://start.spring.io/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add the below dependency to the build.gradle file.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-gradle&#34; data-lang=&#34;gradle&#34;&gt;dependencies
&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;       
    compile group &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;org.springframework.cloud&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; name &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;spring-cloud-starter-consul-config&amp;#39;&lt;/span&gt;      
    compile group &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;org.springframework.cloud&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; name &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;spring-cloud-starter-consul-discovery&amp;#39;&lt;/span&gt;      
    compile group &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;org.springframework.boot&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; name &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;spring-boot-starter-actuator&amp;#39;&lt;/span&gt;   
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The Spring actuator is mandatory so that Consul will keep checking the health status of your application.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add dependency management to the build.gradle file.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-gradle&#34; data-lang=&#34;gradle&#34;&gt;dependencyManagement 
&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;    
imports 
    &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;      
        mavenBom &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;org.springframework.cloud:spring-cloud-dependencies:Finchley.SR1&amp;#34;&lt;/span&gt;    
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; 
 &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create a bootstarp.yml file under src/main/resources as follows&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;spring&lt;/span&gt;: 
  &lt;span style=&#34;color:#66d9ef&#34;&gt;application&lt;/span&gt;: {&lt;span style=&#34;color:#66d9ef&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;testApplication&amp;#39;&lt;/span&gt;} 
  &lt;span style=&#34;color:#66d9ef&#34;&gt;cloud&lt;/span&gt;:   
   &lt;span style=&#34;color:#66d9ef&#34;&gt;consul&lt;/span&gt;:    
    &lt;span style=&#34;color:#66d9ef&#34;&gt;enabled&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;true&amp;#39;&lt;/span&gt;    
    &lt;span style=&#34;color:#66d9ef&#34;&gt;host&lt;/span&gt;: http://localhost    
    &lt;span style=&#34;color:#66d9ef&#34;&gt;port&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;8500&lt;/span&gt;    
    &lt;span style=&#34;color:#66d9ef&#34;&gt;discovery&lt;/span&gt;: {&lt;span style=&#34;color:#66d9ef&#34;&gt;healthCheckInterval&lt;/span&gt;: 300s}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The application name should match the folder name you created in Consul under the Config directory.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use the &lt;code&gt;@Value&lt;/code&gt; annotation to bind the values from consul as follow&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@Component&lt;/span&gt; 
&lt;span style=&#34;color:#a6e22e&#34;&gt;@RefreshScope&lt;/span&gt; 
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Class &lt;span style=&#34;color:#a6e22e&#34;&gt;AppConfig&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;       
  &lt;span style=&#34;color:#a6e22e&#34;&gt;@Value&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;${testKey}&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;     
  &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; String values&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;     
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That’s it Spring Consul will take care of binding the values from consul to your application.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;@RefreshScope annotation is used in the above class, which will say that, if there any changes in the consul then it will immediately refresh the values in the application without restarting. If you havent use @RefreshScope then you need to manually restart the system to apply your config changes&lt;/li&gt;
&lt;li&gt;@RefreshScope will work with annotations like (@component, @service, @controller,@repository etc,)&lt;/li&gt;
&lt;li&gt;Know more about &lt;a href=&#34;https://github.com/dangdangdotcom/config-toolkit/wiki/Refresh-bean-with-spring-cloud&#39;s-@RefreshScope-support&#34;&gt;@RefreshScope&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add &lt;code&gt;@EnableDiscoveryClient&lt;/code&gt; into your main class.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@EnableAutoConfiguration&lt;/span&gt; 
&lt;span style=&#34;color:#a6e22e&#34;&gt;@EnableDiscoveryClient&lt;/span&gt; 
&lt;span style=&#34;color:#a6e22e&#34;&gt;@SpringBootApplication&lt;/span&gt; 
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TestApplication&lt;/span&gt; 
&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;       
  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; args&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;         
    &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; TestApplication&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;TestApplication&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;run&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;args&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;     
  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;      
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Now run your application. It will look for Consul and the values will be bound.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;That’s all! Now you have learned the importance of the Consul KV store and how to integrate it with your Spring application.&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Basic Unix Commands</title>
       <link>https://krish22.github.io/posts/unix-commands/</link>
       <pubDate>Fri, 05 Apr 2019 00:00:00 +0000</pubDate>
       
       <guid>https://krish22.github.io/posts/unix-commands/</guid>
       <description>&lt;p&gt;This post has basic unix commands that we use day by day&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;To check all tcp listen port&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sudo netstat -ntlp | grep LISTEN&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s a few parameters to netstat that are useful for this:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;-l or &amp;ndash;listening shows only the sockets currently listening for incoming connection.&lt;/li&gt;
&lt;li&gt;-a or &amp;ndash;all shows all sockets currently in use.&lt;/li&gt;
&lt;li&gt;-t or &amp;ndash;tcp shows the tcp sockets.&lt;/li&gt;
&lt;li&gt;-u or &amp;ndash;udp shows the udp sockets.&lt;/li&gt;
&lt;li&gt;-n or &amp;ndash;numeric shows the hosts and ports as numbers, instead of resolving in dns and looking in /etc/services.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To find process id for specific port&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sudo netstat -anp | grep 8080&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To find java process&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ps aux | grep java&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</description>
     </item>
   
 </channel>
</rss>
